
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author hp
 */
public class TwoSum {
    // naive solution for the 2Sum problem 
    /*
     * Time Complexity :O(n2)
     * Space Complexity : O(1)
     */
    public static void naive(int [] array, int target){
        int len = array.length;
        if (len < 2){
            System.out.println("Not enough items in array");
        }
        for(int index = 0; index < len -1; index ++){
            for(int jindex = index + 1; jindex < len; jindex ++){
                int currentSum = array[index]+array[jindex];
                if(currentSum == target){
                    System.out.println(array[index]+" "+array[jindex]);
                }
               
            }
        }
    }
    /*
     * uses sorting to lower the complexity
     * Time Complexity : O(nlgn)
     * Space Complexity: Depends upon the sorting routine
     * if MergeSort , Space Complexity : O(n)
     * if QuickSort , Space Complexity : O(1)
     */
    public static void better(int [] array, int target){
        int len = array.length;
        if (len < 2){
            System.out.println("Not enough items in array");
        }
        Arrays.sort(array);
        int left = 0;
        int right = len - 1;
        while(left < right){
            int currentSum = array[left]+array[right];
            if(currentSum == target){
                System.out.println(array[left]+" "+array[right]);
                left += 1;
                right -= 1;
            }
            else if (currentSum < target){
                left += 1;
            }
            else{
                right -= 1;
            }
        }
    }
    /*
     * Best performance , uses Set dataStructure
     * Time Complexity :O(n)
     * Space Complexity : O(1)
     */
    public static void best(int [] array, int target){
        int len = array.length;
        if(len < 2){
            System.out.println("Not enough items in array");
        }
        Set<Integer> mySet = new HashSet();
        for (int index = 0; index < len ; index ++){
            int newTarget = target - array[index];
            if(mySet.contains(newTarget)){
                System.out.println(array[index]+" "+newTarget);
            }
            else{
                mySet.add(array[index]);
            }
        }
    }
    
}
